import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.plugins.jvm.internal.DefaultJvmPluginExtension
import org.gradle.api.plugins.jvm.internal.JvmPluginExtension
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.plugin.SpringBootPlugin
import org.springframework.boot.gradle.tasks.run.BootRun
import versioning.Deps

plugins {
    id 'idea'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'kotlin-convention-helper'
    id 'jackson-convention-helper'
    //id 'io.micronaut.application' // FIXME: `org.springframework.boot` also adds `developmentOnly` so Gradle fails.
    //id 'dependencies-reporting-helper' //FIXME: groovy won't run on java 16
    //id 'com.webcohesion.enunciate'
    id 'com.github.johnrengelman.shadow'
    //id 'org.hibernate.orm'
    id 'org.springframework.boot'
    id 'io.quarkus'
}

repositories.mavenCentral()

def jvm = extensions.create(JvmPluginExtension, "jvm", DefaultJvmPluginExtension)

jvm.createJvmVariant('micronaut') {
    distinctCapability()
    withSourcesJar()
    published()
}
jvm.createJvmVariant('micronautTest') {
    distinctCapability()
}
jvm.createJvmVariant('spring') {
    distinctCapability()
    withSourcesJar()
    published()
}
jvm.createJvmVariant('springTest') {
    distinctCapability()
}

configurations {
    micronautDevelopmentOnly
    quarkusDevelopmentOnly
    springDevelopmentOnly.extendsFrom(configurations.developmentOnly)
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(16))
tasks.withType(JavaCompile).configureEach {
    it.options.release.set(14)
}
tasks.withType(KotlinCompile).configureEach {
    it.kotlinOptions.jdkHome = javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(16))
    }.get().executablePath.asFile.parentFile.parent
    it.kotlinOptions.jvmTarget = "14"
}

dependencies {
    //enunciate('dk.jyskebank.tooling.enunciate:enunciate-openapi:1.1.+')

    annotationProcessor              platform(project(':convention'))
    kapt                             platform(project(':convention'))
    compileOnly                      platform(project(':convention'))
    developmentOnly                  platform(project(':convention'))
    implementation                   platform(project(':convention'))
    runtimeOnly                      platform(project(':convention'))
    testAnnotationProcessor          platform(project(':convention'))
    kaptTest                         platform(project(':convention'))
    testImplementation               platform(project(':convention'))
    testRuntimeOnly                  platform(project(':convention'))

    micronautAnnotationProcessor     platform(project(':convention'))
    kaptMicronaut                    platform(project(':convention'))
    micronautCompileOnly             platform(project(':convention'))
    micronautDevelopmentOnly         platform(project(':convention'))
    micronautImplementation          platform(project(':convention'))
    micronautRuntimeOnly             platform(project(':convention'))
    micronautTestAnnotationProcessor platform(project(':convention'))
    kaptMicronautTest                platform(project(':convention'))
    micronautTestImplementation      platform(project(':convention'))
    micronautTestRuntimeOnly         platform(project(':convention'))

    kaptSpring                       platform(project(':convention'))
    kaptSpringTest                   platform(project(':convention'))
    springAnnotationProcessor        platform(project(':convention'))
    springCompileOnly                platform(project(':convention'))
    springDevelopmentOnly            platform(project(':convention'))
    springImplementation             platform(project(':convention'))
    springRuntimeOnly                platform(project(':convention'))
    springTestAnnotationProcessor    platform(project(':convention'))
    springTestImplementation         platform(project(':convention'))
    springTestRuntimeOnly            platform(project(':convention'))

    /*
     * ORDER MATTERS!!
     * JPAMODELGEN better go first!
     * For IDEA based build (Ant) this has to be in `annotationProcessor`
     */
    kaptMicronaut                    Deps.Libs.VALIDATOR_AP
    kaptMicronaut                    'io.micronaut.configuration:micronaut-openapi'
    kaptMicronaut                    'io.micronaut.spring:micronaut-spring-annotation'//:2.1.0'
    kaptMicronaut                    'io.micronaut.spring:micronaut-spring-boot-annotation'//:2.1.0'
    kaptMicronaut                    'io.micronaut.spring:micronaut-spring-web-annotation'//:2.1.0'
    kaptMicronaut                    'io.micronaut:micronaut-graal'
    kaptMicronaut                    'io.micronaut:micronaut-inject-java'
    kaptMicronaut                    'io.micronaut:micronaut-validation'
    kaptMicronaut                    'org.springframework.boot:spring-boot-configuration-processor'//:2.1.0'

    micronautCompileOnly             Deps.Jakarta.CDI
    micronautCompileOnly             Deps.Jakarta.SERVLET
    micronautCompileOnly             Deps.Libs.SLF4J_API
    micronautCompileOnly             'org.graalvm.nativeimage:svm'

    micronautDevelopmentOnly         'io.methvin:directory-watcher'
    micronautDevelopmentOnly         'io.micronaut:micronaut-runtime-osx'
    micronautDevelopmentOnly         'net.java.dev.jna:jna'

    micronautImplementation          project(':shared')
    micronautImplementation          (project(':time-service.api'))
    micronautImplementation          (project(':time-service.app'))

    kaptMicronaut          (project(':time-service.api')) {
        capabilities {
            requireCapability("${project.group}:${project(':time-service.api').name}-micronaut")
        }
    }
    kaptMicronaut          (project(':time-service.app')) {
        capabilities {
            requireCapability("${project.group}:${project(':time-service.app').name}-micronaut")
        }
    }

    micronautImplementation          (project(':time-service.api')) {
        capabilities {
            requireCapability("${project.group}:${project(':time-service.api').name}-micronaut")
        }
    }
    micronautImplementation          (project(':time-service.app')) {
        capabilities {
            requireCapability("${project.group}:${project(':time-service.app').name}-micronaut")
        }
    }
    micronautImplementation          'com.blazebit:blaze-persistence-integration-hibernate-base'
    micronautImplementation          'com.fasterxml.jackson.module:jackson-module-kotlin'
    micronautImplementation          'com.kumuluz.ee.rest:kumuluzee-rest-core:1.2.3'
    //micronautImplementation          'io.ktor:ktor-jackson'
    //micronautImplementation          'io.ktor:ktor-server-netty'
    micronautImplementation          'io.micronaut.configuration:micronaut-hibernate-jpa'
    micronautImplementation          'io.micronaut.configuration:micronaut-hibernate-jpa-spring' //Spring-based transaction management
    micronautImplementation          'io.micronaut.configuration:micronaut-micrometer-core'
    micronautImplementation          'io.micronaut.data:micronaut-data-hibernate-jpa:1.1.0.RC1'
    //micronautImplementation          'io.micronaut.kotlin:micronaut-ktor'
    micronautImplementation          'io.micronaut.kotlin:micronaut-kotlin-runtime:1.0.1'
    micronautImplementation          'io.micronaut.kotlin:micronaut-kotlin-extension-functions:1.0.1'
    micronautImplementation          'io.micronaut.configuration:micronaut-jdbc-hikari' //Important for starting up Database connectivity
    micronautImplementation          'io.micronaut:micronaut-http-server'
    micronautImplementation          'io.micronaut:micronaut-inject'
    micronautImplementation          'io.micronaut:micronaut-management' //management endpoints
    micronautImplementation          'io.micronaut:micronaut-runtime' //FIXME: N.B. INCLUDE IT !!!!!!!!!!!!!!!!!
    micronautImplementation          'io.swagger.core.v3:swagger-annotations'
    micronautImplementation          Deps.Libs.COROUTINES_JDK8
    micronautImplementation          Deps.Libs.COROUTINES_RXJAVA2
    micronautImplementation          'org.springframework.boot:spring-boot-starter'
    micronautImplementation          'org.springframework.boot:spring-boot-starter-web'

    micronautRuntimeOnly             'ch.qos.logback:logback-classic'
    micronautRuntimeOnly             'com.h2database:h2'
    micronautRuntimeOnly             'com.blazebit:blaze-persistence-core-impl'
    micronautRuntimeOnly             'com.blazebit:blaze-persistence-entity-view-impl'
    micronautRuntimeOnly             'com.blazebit:blaze-persistence-integration-hibernate-5.4'
    micronautRuntimeOnly             'com.blazebit:blaze-persistence-jpa-criteria-impl'
    micronautRuntimeOnly             'io.micronaut.spring:micronaut-spring-boot'//:2.1.0')
    micronautRuntimeOnly             'io.micronaut.spring:micronaut-spring-web'//:2.1.0')
    micronautImplementation             'io.micronaut:micronaut-http-server-netty'

    kaptMicronautTest                'org.apache.logging.log4j:log4j-to-slf4j:2.13.3'
    kaptMicronautTest                'org.slf4j:jul-to-slf4j:1.7.30'

    micronautTestImplementation      'io.micronaut.test:micronaut-test-junit5'
    micronautTestImplementation      'io.micronaut.test:micronaut-test-kotlintest'

    kaptSpring                       'org.springframework.boot:spring-boot-configuration-processor'

    //agent                            "org.springframework:spring-instrument:5.2.8.RELEASE"

    springDevelopmentOnly            'org.springframework.boot:spring-boot-devtools'

    springImplementation             project(':shared')
    springImplementation             project(':time-service.api')
    springImplementation             project(':time-service.app')
    springImplementation             Deps.Jakarta.INJECT
    //springImplementation             'com.vaadin:vaadin-spring-boot-starter'
    springImplementation             'com.fasterxml.jackson.module:jackson-module-kotlin'
    springImplementation             'io.swagger.core.v3:swagger-annotations'
    springImplementation             'org.hibernate:hibernate-core'
    springImplementation             'org.springframework.boot:spring-boot-starter-actuator'
    springImplementation             'org.springframework.boot:spring-boot-starter-data-jpa'
    springImplementation             'org.springframework.boot:spring-boot-starter-validation'
    springImplementation             ('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    springImplementation 'org.springframework.boot:spring-boot-starter-jetty'

    springImplementation             'org.aspectj:aspectjrt'
    springImplementation             'org.aspectj:aspectjweaver'
    springImplementation             'org.springframework:spring-aspects'

    springRuntimeOnly                'com.blazebit:blaze-persistence-core-impl'
    springRuntimeOnly                'com.blazebit:blaze-persistence-entity-view-impl'
    springRuntimeOnly                'com.blazebit:blaze-persistence-integration-hibernate-5.4'
    springRuntimeOnly                'com.blazebit:blaze-persistence-jpa-criteria-impl'

    springRuntimeOnly                'com.h2database:h2'

    springTestImplementation         'org.springframework.boot:spring-boot-starter-test'

    implementation                   project(':shared')
    implementation                   project(':time-service.api')
    implementation                   project(':time-service.app')
    implementation                   'com.blazebit:blaze-persistence-integration-quarkus'
    implementation                   'io.quarkus:quarkus-config-yaml'
    //implementation                   'io.quarkus:quarkus-grpc'
    implementation                   'io.quarkus:quarkus-hibernate-orm'
    implementation                   'io.quarkus:quarkus-jackson'
    implementation                   'io.quarkus:quarkus-jdbc-h2'
    implementation                   'io.quarkus:quarkus-kotlin'
    implementation                   'io.quarkus:quarkus-resteasy'
    implementation                   'io.quarkus:quarkus-resteasy-jackson'
    implementation                   'io.quarkus:quarkus-resteasy-mutiny'
    implementation                   'io.quarkus:quarkus-smallrye-metrics'
    implementation                   'io.quarkus:quarkus-spring-boot-properties'
    implementation                   'io.quarkus:quarkus-spring-di'
    implementation                   'io.quarkus:quarkus-spring-web'

    runtimeOnly                      'com.blazebit:blaze-persistence-core-impl'
    runtimeOnly                      'com.blazebit:blaze-persistence-entity-view-impl'
    runtimeOnly                      'com.blazebit:blaze-persistence-integration-hibernate-5.4'
    runtimeOnly                      'com.blazebit:blaze-persistence-jpa-criteria-impl'
    runtimeOnly                      'com.h2database:h2'

    testImplementation               'io.quarkus:quarkus-junit5'
    testImplementation               'io.rest-assured:kotlin-extensions'
}

quarkus {
    outputDirectory       = "$buildDir/classes/kotlin/main"
    outputConfigDirectory = "$buildDir/resources/main"
}

quarkusDev {
    sourceDir  = "$projectDir/src/main/kotlin"
    workingDir = rootProject.projectDir
}

rootProject.idea {
    //noinspection GroovyAssignabilityCheck
    project {
        settings {
            doNotDetectFrameworks('spring')
        }
    }
}

idea.module.downloadSources = true

//Quarkus does this anyways
//hibernate {
//    enhance {
//        enableLazyInitialization    = true
//        enableDirtyTracking         = true
//        enableAssociationManagement = true
//        enableExtendedEnhancement   = false
//    }
//}

application {
    //mainModule.convention('com.example.marvel.runtime')
    mainClass                 = 'com.example.marvel.ApplicationKt'
    mainClassName             = 'com.example.marvel.ApplicationKt' //FIXME: Shadow plugin uses older Gradle Tooling API, there is no `mainClass` prop
    applicationDefaultJvmArgs = ['-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '--illegal-access=warn']
}

tasks.withType(ProcessResources).configureEach {
    filesMatching('openapi.properties') {
        System.setProperty('micronaut.openapi.config.file', path) //FIXME
        expand(project.properties)
    }
}
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
tasks.withType(BootRun).configureEach {
    sourceResources(sourceSets.spring)
    it.classpath = sourceSets.spring.runtimeClasspath
//    it.jvmArgs("-javaagent:${project.configurations.agent.asPath}")
}
//tasks.withType(BootJar).configureEach {
//    it.jvmArgs("-javaagent:${project.configurations.agent.asPath}")
//}
tasks.named(ApplicationPlugin.TASK_RUN_NAME, JavaExec).configure {
    it.classpath = sourceSets.micronaut.runtimeClasspath
    it.jvmArgs('-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop')
}
tasks.withType(JavaExec).configureEach {
    classpath += configurations.developmentOnly
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}
tasks.withType(ShadowJar).configureEach {
    mergeServiceFiles()
}
tasks.withType(Test).configureEach {
    classpath += configurations.developmentOnly
    useJUnitPlatform()
    exclude('**/Native*')
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}
publishing {
    repositories.maven { url 'https://maven.pkg.github.com/soberich/marvel' }
    publications {
        bootJava(MavenPublication) {
            artifact tasks.named(SpringBootPlugin.BOOT_JAR_TASK_NAME)
        }
        maven(MavenPublication) {
            from components.java
        }
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

configure([
    project(':time-service.app'),
    project(':time-service.api')
]) {
    //apply plugin: 'io.micronaut.library' //adds `micronaut-inject` to compile and `micronaut-inject-<lang>` to apt
    apply plugin: 'kotlin-convention-helper'

    configurations {
        kaptMicronaut.extendsFrom(configurations.annotationProcessor, configurations.kapt)
    }
    def jvmSubproject = extensions.create(JvmPluginExtension, "jvm", DefaultJvmPluginExtension)


    jvmSubproject.createJvmVariant('micronaut') {
        usingSourceSet(sourceSets.main)
        distinctCapability()
        withSourcesJar()
        published()
    }
    dependencies {
        kapt/*Micronaut*/                    platform(project(':convention'))
        kapt/*Micronaut*/                    platform(project(':convention'))

        kapt/*Micronaut*/                    'io.micronaut.data:micronaut-data-processor'          // In theory should allow `javax.transaction.Transactional` usage.

        kapt/*Micronaut*/                    'io.micronaut.spring:micronaut-spring-web-annotation' // Allows Spring MVC annotations to be processes.
        kapt/*Micronaut*/                    'io.micronaut:micronaut-inject-java' // Allows Spring MVC annotations to be processes.

        micronautImplementation          'io.micronaut:micronaut-inject'

        //FIXME: Unfortunately all this is leaked to compile classpath, hence visible in subproject. Otherwise AOT compilation won't work.
        //main dependency for integration Micronaut <-> Hibernate
        micronautImplementation          'io.micronaut.configuration:micronaut-hibernate-jpa'

        micronautImplementation          'io.micronaut:micronaut-core'       //FIXME: N.B. INCLUDE THIS ONE, annotated classes, endpoints won't be discovered otherwise !!!!!!!!!!!!!!!!!!
        micronautImplementation          'io.micronaut:micronaut-validation' //FIXME: N.B. INCLUDE THIS ONE, annotated classes, endpoints won't be discovered otherwise !!!!!!!!!!!!!!!!!!
        micronautImplementation          'io.micronaut:micronaut-runtime'    //FIXME: N.B. INCLUDE THIS ONE, annotated classes, endpoints won't be discovered otherwise !!!!!!!!!!!!!!!!!!
    }
}
